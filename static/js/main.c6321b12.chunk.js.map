{"version":3,"sources":["apiKey.js","App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["_0x1b15","_0x7a10b9","_0x2720","_0x59d973","_0x5db162","_0x3797c6","_0x1ce87f","_0x5f424f","_0x5c8c0a","_0x11a27f","_0x2d25cd","_0x10ee68","parseInt","_0x2e0421","App","key","_0x50267a","fyUwP","getAPIKey","React","createElement","className","style","textAlign","id","IframeResizer","src","minWidth","minHeight","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wKAAA,SAASA,IACP,IAAIC,EAAY,CACZ,WACA,eACA,eACA,aACA,cACA,eACA,aACA,QACA,aACA,aACA,aACA,WACA,gBACA,aACA,YACA,eAKJ,OAHAD,EAAU,WACN,OAAOC,MAkBb,SAASC,EAAQC,EAAWC,GAC1B,IAAIC,EAAYL,IAChB,OAAOE,EAAU,SAAUI,EAAWC,GAGlC,OADgBF,EADhBC,GAAqB,OAGdH,EAAWC,IApBvB,SAAUI,EAAWC,GAEpB,IADA,IAAIC,EAAYR,EAASS,EAYzBX,MAVI,IAEI,GAQC,UATgBY,SAASF,EAAU,MAAM,EAAqCE,SAASF,EAAU,MAAM,GAAsCE,SAASF,EAAU,MAAM,IAAqDE,SAASF,EAAU,MAAM,GAAiCE,SAASF,EAAU,MAAM,IAA+CE,SAASF,EAAU,MAAM,GAA6CE,SAASF,EAAU,MAAM,IAA4CE,SAASF,EAAU,MAAM,IAAkDE,SAASF,EAAU,MAAM,IAA2CE,SAASF,EAAU,MAAM,IAA+CE,SAASF,EAAU,MAAM,GAErtB,MAEAC,EAAgB,KAAEA,EAAiB,SACzC,MAAOE,GACLF,EAAgB,KAAEA,EAAiB,UAV5C,GCUcG,MA7Bf,WACE,MAAMC,EDwCO,WACb,IAAIC,EAAYd,EAChB,MADqC,CAAEe,MAASD,EAAU,KAAQA,EAAU,KAAQA,EAAU,KAAQA,EAAU,MAC/FA,EAAU,MC1CfE,GACZ,OACEC,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,OAAKE,MAAO,CAAEC,UAAW,WACvBJ,IAAAC,cAAA,UAAI,iFACJD,IAAAC,cAAA,SAAG,gDACHD,IAAAC,cAAA,kBACED,IAAAC,cAAA,KAAGI,GAAG,SACJL,IAAAC,cAAA,SAAG,6GAMPD,IAAAC,cAAA,SAAG,gCAELD,IAAAC,cAACK,IAAa,CACZC,IACE,mDACAX,EACA,8CAEFO,MAAO,CAAEK,SAAU,OAAQC,UAAW,eChB1BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCLpBC,MAZUC,IACnBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhC,IAAAC,cAACD,IAAMiC,WAAU,KACfjC,IAAAC,cAACN,EAAG,QFsHF,kBAAmBuC,WACrBA,UAAUC,cAAcC,MACrBhB,KAAMiB,IACLA,EAAaC,eAEdC,MAAOC,IACNC,QAAQD,MAAMA,EAAME,WEhH5B3B","file":"static/js/main.c6321b12.chunk.js","sourcesContent":["function _0x1b15() {\r\n  var _0x7a10b9 = [\r\n      '12HXMvLl',\r\n      '577134OyIIIy',\r\n      '738063jjEJfY',\r\n      '1685QqeHGM',\r\n      '11892rkdnMY',\r\n      '949456xAdHih',\r\n      '6139KCfoqO',\r\n      'fyUwP',\r\n      '2248vtJcUA',\r\n      'ikcBn6k2fo',\r\n      'AIzaSyC9d4',\r\n      '10ySotiy',\r\n      '3498616mWxCZr',\r\n      'xIALl6SFer',\r\n      'e-jBskpFs',\r\n      '36605rsJBpV'\r\n  ];\r\n  _0x1b15 = function () {\r\n      return _0x7a10b9;\r\n  };\r\n  return _0x1b15();\r\n}\r\n(function (_0x5c8c0a, _0x11a27f) {\r\n  var _0x2d25cd = _0x2720, _0x10ee68 = _0x5c8c0a();\r\n  while (!![]) {\r\n      try {\r\n          var _0x21726e = -parseInt(_0x2d25cd(0x85)) / (-0x1f3d + 0x11 * 0xf1 + 0xf3d) + parseInt(_0x2d25cd(0x7b)) / (0x1305 + 0x2e4 + 0x9 * -0x26f) + -parseInt(_0x2d25cd(0x87)) / (0x2062 * 0x1 + 0x8e5 * -0x4 + -0x1 * -0x335) * (-parseInt(_0x2d25cd(0x86)) / (0x1657 + -0xbd3 + -0xa80)) + parseInt(_0x2d25cd(0x89)) / (0xc7a * -0x1 + -0x18 * -0xf3 + -0xa49) * (-parseInt(_0x2d25cd(0x8a)) / (0x181 * -0x5 + -0x8f0 + 0x107b * 0x1)) + parseInt(_0x2d25cd(0x7c)) / (0x3f8 + -0x5 * 0x38f + 0x12 * 0xc5) * (-parseInt(_0x2d25cd(0x7e)) / (-0x22e5 * -0x1 + -0xa * -0x317 + -0x41c3)) + -parseInt(_0x2d25cd(0x88)) / (-0x1 * -0x2114 + -0x17df + -0x92c) * (-parseInt(_0x2d25cd(0x81)) / (-0xf6e + -0x2 * -0x104 + -0x1ae * -0x8)) + parseInt(_0x2d25cd(0x82)) / (-0x2557 + -0x108e + -0x35f * -0x10);\r\n          if (_0x21726e === _0x11a27f)\r\n              break;\r\n          else\r\n              _0x10ee68['push'](_0x10ee68['shift']());\r\n      } catch (_0x2e0421) {\r\n          _0x10ee68['push'](_0x10ee68['shift']());\r\n      }\r\n  }\r\n}(_0x1b15, -0x2c5e9 + -0xba * 0xac + -0x1 * -0xae7b6));\r\nfunction _0x2720(_0x59d973, _0x5db162) {\r\n  var _0x3797c6 = _0x1b15();\r\n  return _0x2720 = function (_0x1ce87f, _0x5f424f) {\r\n      _0x1ce87f = _0x1ce87f - (0x3e2 + 0x1dc9 + -0x2130);\r\n      var _0x31cd3e = _0x3797c6[_0x1ce87f];\r\n      return _0x31cd3e;\r\n  }, _0x2720(_0x59d973, _0x5db162);\r\n}\r\nexport default function getAPIKey() {\r\n  var _0x50267a = _0x2720, _0x16ce3f = { 'fyUwP': _0x50267a(0x80) + _0x50267a(0x7f) + _0x50267a(0x83) + _0x50267a(0x84) };\r\n  return _0x16ce3f[_0x50267a(0x7d)];\r\n}","import React from \"react\";\r\nimport \"./App.css\";\r\nimport IframeResizer from \"iframe-resizer-react\";\r\nimport getAPIKey from \"./apiKey\";\r\n\r\nfunction App() {\r\n  const key = getAPIKey();\r\n  return (\r\n    <div className=\"App\">\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <h1>ðŸŽ¯ This is a useless website full of useless resources ðŸ˜…</h1>\r\n        <p>(No longer maintained - REACHED END OF LIFE)</p>\r\n        <blockquote>\r\n          <p id=\"quote\">\r\n            <i>\r\n              \"ðŸ’¯ The production of too many useful things results in too many\r\n              useless people.\" - Karl Marx\r\n            </i>\r\n          </p>\r\n        </blockquote>\r\n        <p>Download below ðŸ‘‡</p>\r\n      </div>\r\n      <IframeResizer\r\n        src={\r\n          \"https://googledriveembedder.collegefam.com/?key=\" +\r\n          key +\r\n          \"&folderid=1yfX0cpjv8IOxsw06C2ip3RpNveH19vUa\"\r\n        }\r\n        style={{ minWidth: \"100%\", minHeight: \"27000px\" }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}